diff --git a/Cargo.toml b/Cargo.toml
index e5b157a..6845655 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -8,6 +8,7 @@ readme = "README.md"
 riscv = "0.8"
 bitflags = "1.3.2"
 elf_rs = "0.3.0"
+fdt = "0.1.5"
 
 [profile.dev]
 panic = "abort"
diff --git a/makefile b/makefile
index ba80032..ef5e619 100644
--- a/makefile
+++ b/makefile
@@ -32,6 +32,11 @@ clean:
 	cargo clean
 	cd tool && cargo clean && cd ..
 
+clean-tacos:
+	rm -rf $(BUILD_DIR)
+	rm -f mkfs
+	cargo clean
+
 format:
 	cargo fmt
 	find . -type f -name "*.c" -o -name "*.h" -exec clang-format -i {} +
diff --git a/src/device.rs b/src/device.rs
index 28d7b94..e893421 100644
--- a/src/device.rs
+++ b/src/device.rs
@@ -1,3 +1,2 @@
-pub mod dtb;
 pub mod plic;
 pub mod virtio;
diff --git a/src/device/dtb.rs b/src/device/dtb.rs
deleted file mode 100644
index bb90c31..0000000
--- a/src/device/dtb.rs
+++ /dev/null
@@ -1,183 +0,0 @@
-//! DeviceTree Blob
-//!
-//! ref: <https://devicetree-specification.readthedocs.io>
-//! > Boot is a complex process, to initialize and boot a computer system,
-//! > various software components interact...
-//! >
-//! > Boot program is used to generically refer to a software component that
-//! > initializes the system state and executes another software component
-//! > referred to as a client program.
-//! >
-//! > The devicetree provides a complete boot program to client program
-//! > interface definition, combined with minimum system requirements that
-//! > facilitate the development of a wide variety of systems.
-//!
-//! DTB(Device Tree Blob) is the compact binary representation of the devicetree.
-//! This module contains data structures that are used to read the devicetree from
-//! DTB.
-//!
-
-#[macro_use]
-mod macros;
-mod header;
-mod property;
-
-use core::ffi;
-
-use self::header::Header;
-use self::property::Property;
-
-const FDT_BEGIN_NODE: u32 = 0x1;
-const FDT_END_NODE: u32 = 0x2;
-const FDT_PROP: u32 = 0x3;
-const FDT_NOP: u32 = 0x4;
-const FDT_END: u32 = 0x9;
-
-pub struct DeviceTree {
-    base: *const u8,
-    header: Header,
-}
-
-impl DeviceTree {
-    pub fn new(base: usize) -> Self {
-        Self {
-            base: base as *const _,
-            header: Header::from_raw(base),
-        }
-    }
-
-    /// # Safety
-    ///
-    /// Depends on the structure of device tree blob.
-    ///
-    /// # Return
-    /// `(usize, usize, &str)`: (pm_start, pm_len, bootargs).
-    ///
-    /// TODO: rewrite this fn.
-    pub unsafe fn traverse(&self) -> (usize, usize, *const i8) {
-        #[cfg(feature = "debug")]
-        kprintln!("[DTB] Start device enum...");
-        let dt_struct_base = self.base.add(self.header.off_dt_struct as usize) as *const u32;
-
-        let mut off = 0;
-        let mut ret = (0, 0, 0 as *const i8);
-        let mut _debug_prefix_num = 0;
-        loop {
-            let ptr = dt_struct_base.add(off);
-            let token = u32::from_be(*ptr);
-
-            match token {
-                FDT_BEGIN_NODE => {
-                    let name = ptr.add(1) as *const ffi::c_char;
-                    let name = ffi::CStr::from_ptr(name).to_str().expect("Bad dtb str");
-
-                    #[cfg(feature = "debug")]
-                    {
-                        _debug_prefix(_debug_prefix_num);
-                        // To avoid timestamp printing we use kprint!() and '\n' here,
-                        // so as below.
-                        kprint!("Node={}\n", name);
-                        _debug_prefix(_debug_prefix_num);
-                        kprint!("{{\n");
-                    }
-
-                    // The string is padded to be i32 align, saying the Spec.
-                    // So we skip the node name in `i32` length by (namelen + 3) / 4.
-                    // Also an additional byte '\0' (i.e., namelen + 1 then + 3).
-                    let namelen = name.len();
-                    off += (namelen + 4) / 4;
-
-                    if *name == *"memory@80000000" {
-                        let info = self.extract_memory_info(ptr);
-                        ret.0 = info.0;
-                        ret.1 = info.1;
-
-                        #[cfg(feature = "debug")]
-                        {
-                            _debug_prefix(_debug_prefix_num);
-                            kprint!("Extract memory info {:#x} {:#x}\n", info.0, info.1);
-                        }
-                    }
-                    _debug_prefix_num += 1;
-                }
-                FDT_END_NODE => {
-                    _debug_prefix_num -= 1;
-
-                    #[cfg(feature = "debug")]
-                    {
-                        _debug_prefix(_debug_prefix_num);
-                        kprint!("}}\n");
-                        _debug_prefix(_debug_prefix_num);
-                        kprint!("Node end\n");
-                    }
-                }
-                FDT_PROP => {
-                    let prop = Property::from_raw(ptr.add(1) as usize);
-                    let name = self.extract_str_from_offset(prop.nameoff);
-
-                    #[cfg(feature = "debug")]
-                    {
-                        _debug_prefix(_debug_prefix_num);
-                        kprint!(" |_ Property=(len={}, name=\'{}\')\n", prop.len, name);
-                    }
-
-                    if *name == *"bootargs" {
-                        let bootargs = ptr.add(3) as *const ffi::c_char;
-                        ret.2 = bootargs;
-                        #[cfg(feature = "debug")]
-                        {
-                            _debug_prefix(_debug_prefix_num);
-                            kprint!(" bootargs: {:?}\n", bootargs);
-                        }
-                    }
-
-                    // Skip the property header.
-                    off += 2;
-                    // Skip the property data.
-                    off += (prop.len as usize + 3) / 4;
-                }
-                FDT_END => break,
-                FDT_NOP => { /* NOP token must be ignored. */ }
-                _ => { /* Occasionally we meet unexpected token, skip them but don't panic. */ }
-            }
-            // Skip one token.
-            off += 1;
-        }
-        ret
-    }
-
-    unsafe fn extract_str_from_offset(&self, nameoff: u32) -> &str {
-        let name = self
-            .base
-            .add((self.header.off_dt_strings + nameoff) as usize);
-        ffi::CStr::from_ptr(name as *const ffi::c_char)
-            .to_str()
-            .expect("Bad dtb str")
-    }
-
-    unsafe fn extract_memory_info(&self, addr: *const u32) -> (usize, usize) {
-        let mut off = 0;
-        loop {
-            let ptr: *const u32 = addr.add(off);
-            let token = u32::from_be(*ptr);
-
-            if token == FDT_PROP {
-                let Property { nameoff, .. } = Property::from_raw(ptr.add(1) as usize);
-                if *self.extract_str_from_offset(nameoff) == *"reg" {
-                    return (
-                        usize::from_be(*ptr.add(3).cast()),
-                        usize::from_be(*ptr.add(5).cast()),
-                    );
-                }
-            }
-
-            off += 1;
-        }
-    }
-}
-
-fn _debug_prefix(num: usize) {
-    for _ in 0..num {
-        kprint!("  ");
-    }
-}
diff --git a/src/device/dtb/header.rs b/src/device/dtb/header.rs
deleted file mode 100644
index de3c0a4..0000000
--- a/src/device/dtb/header.rs
+++ /dev/null
@@ -1,15 +0,0 @@
-#[repr(C)]
-pub struct Header {
-    pub magic: u32,
-    pub totalsize: u32,
-    pub off_dt_struct: u32,
-    pub off_dt_strings: u32,
-    pub off_mem_rsvmap: u32,
-    pub version: u32,
-    pub last_comp_version: u32,
-    pub boot_cpuid_phys: u32,
-    pub size_dt_strings: u32,
-    pub size_dt_struct: u32,
-}
-
-u32_array_from_raw_big_endian!(Header);
diff --git a/src/device/dtb/macros.rs b/src/device/dtb/macros.rs
deleted file mode 100644
index b365664..0000000
--- a/src/device/dtb/macros.rs
+++ /dev/null
@@ -1,14 +0,0 @@
-#[macro_export]
-macro_rules! u32_array_from_raw_big_endian {
-    ($u32_array_struct: ident) => {
-        const LENGTH: usize = core::mem::size_of::<$u32_array_struct>() / 4;
-        impl $u32_array_struct {
-            pub fn from_raw(base: usize) -> Self {
-                let raw: &[u32; LENGTH] = unsafe { core::mem::transmute(base) };
-                let data: [u32; LENGTH] = core::array::from_fn(|i| u32::from_be(raw[i]));
-
-                unsafe { core::mem::transmute(data) }
-            }
-        }
-    };
-}
diff --git a/src/device/dtb/property.rs b/src/device/dtb/property.rs
deleted file mode 100644
index 0ffa7de..0000000
--- a/src/device/dtb/property.rs
+++ /dev/null
@@ -1,7 +0,0 @@
-#[repr(C)]
-pub struct Property {
-    pub len: u32,
-    pub nameoff: u32,
-}
-
-u32_array_from_raw_big_endian!(Property);
diff --git a/src/main.rs b/src/main.rs
index 4bc385a..98f3150 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -4,6 +4,7 @@
 extern crate alloc;
 extern crate bitflags;
 extern crate elf_rs;
+extern crate fdt;
 extern crate riscv;
 
 #[macro_use]
@@ -25,10 +26,12 @@ mod test;
 
 pub use error::OsError;
 
-use core::{ffi, ptr};
+use core::{ptr, slice, str};
+use fdt::{standard_nodes::MemoryRegion, Fdt};
 use riscv::register;
 
 use fs::{disk::DISKFS, FileSys};
+use mem::PhysAddr;
 
 extern "C" {
     fn sbss();
@@ -50,21 +53,37 @@ pub extern "C" fn main(hart_id: usize, dtb: usize) -> ! {
     // Flush BSS since they are not loaded and the corresponding memory may be random
     unsafe { ptr::write_bytes(sbss as *mut u8, 0, ebss as usize - sbss as usize) };
 
-    let tree = device::dtb::DeviceTree::new(dtb);
-
+    // Parse the device tree.
+    let devtree = unsafe { Fdt::from_ptr(dtb as *const u8).unwrap() };
     // Get the start point and length of physical memory
-    let (pm_base, pm_len, bootargs) = unsafe { tree.traverse() };
+    let (pm_base, pm_len) = {
+        let memory = devtree.memory();
+        let mut regions = memory.regions();
+        let MemoryRegion {
+            starting_address,
+            size,
+        } = regions.next().expect("No memory info.");
+        assert_eq!(regions.next(), None, "Unknown memory region");
+        (
+            starting_address as usize,
+            size.expect("Unknown physical memory length"),
+        )
+    };
     assert_eq!(pm_base, mem::PM_BASE, "Error constant mem::PM_BASE.");
-
     // Get the boot arguments.
     let _bootargs: &'static str = unsafe {
-        ffi::CStr::from_ptr(bootargs.add(mem::VM_OFFSET))
-            .to_str()
-            .expect("Bad bootarg.")
+        let (vm, len) = {
+            let bootargs = devtree.chosen().bootargs().unwrap();
+            let len = bootargs.len();
+            (PhysAddr::from_pa(bootargs.as_ptr() as usize).into_va(), len)
+        };
+        str::from_utf8(slice::from_raw_parts(vm as *const u8, len)).unwrap()
     };
 
+    // Initialize memory management.
     let ram_base = ekernel as usize;
     let ram_tail = dtb + mem::VM_OFFSET; // Current we do not reuse dtb area.
+    mem::init(ram_base, ram_tail, pm_len);
 
     #[cfg(feature = "debug")]
     {
@@ -72,11 +91,6 @@ pub extern "C" fn main(hart_id: usize, dtb: usize) -> ! {
         kprintln!("BOOTARGS: {:?}", _bootargs);
     }
 
-    unsafe {
-        mem::Palloc::init(ram_base, ram_tail);
-        mem::KernelPgTable::init(pm_len);
-    }
-
     trap::set_strap_entry();
 
     unsafe {
diff --git a/src/mem.rs b/src/mem.rs
index b747142..6e7f305 100644
--- a/src/mem.rs
+++ b/src/mem.rs
@@ -22,6 +22,8 @@ pub use self::pagetable::*;
 pub use self::palloc::Palloc;
 pub use self::utils::*;
 
+use self::palloc::USER_POOL_LIMIT;
+
 pub fn get_pte(va: usize) -> Option<Entry> {
     match crate::thread::Manager::get().current.lock().pagetable {
         Some(ref pt) => pt.lock().get_pte(va).copied(),
@@ -29,6 +31,16 @@ pub fn get_pte(va: usize) -> Option<Entry> {
     }
 }
 
+pub fn init(ram_base: usize, ram_tail: usize, pm_len: usize) {
+    let palloc_tail = ram_tail - USER_POOL_LIMIT * PG_SIZE;
+
+    unsafe {
+        palloc::Palloc::init(ram_base, palloc_tail);
+        palloc::UserPool::init(palloc_tail, ram_tail);
+        KernelPgTable::init(pm_len);
+    }
+}
+
 /// Translate a virtual address (pointer, slice) to a kernel virtual address
 /// if it's in user space. The translated user object is supposed to be in a page.
 pub trait Translate: Sized {
diff --git a/src/mem/palloc.rs b/src/mem/palloc.rs
index 3332a68..eb1415c 100644
--- a/src/mem/palloc.rs
+++ b/src/mem/palloc.rs
@@ -8,7 +8,7 @@ use crate::sync::{Intr, Lazy, Mutex};
 // BuddyAllocator allocates at most `1<<MAX_ORDER` pages at a time
 const MAX_ORDER: usize = 8;
 // How many pages are there in the user memory pool
-const USER_POOL_LIMIT: usize = 256;
+pub(super) const USER_POOL_LIMIT: usize = 256;
 
 /// Buddy Allocator. It allocates and deallocates memory page-wise.
 #[derive(Debug)]
@@ -142,7 +142,6 @@ impl Palloc {
 
 pub struct UserPool(Lazy<Mutex<BuddyAllocator, Intr>>);
 
-// UserPool has only one instance, so it's safe to claim it as `Sync`
 unsafe impl Sync for UserPool {}
 
 impl UserPool {
@@ -156,16 +155,13 @@ impl UserPool {
         Self::instance().lock().dealloc(ptr, n)
     }
 
+    /// Initialize the page-based allocator
+    pub unsafe fn init(start: usize, end: usize) {
+        Self::instance().lock().insert_range(start, end);
+    }
+
     fn instance() -> &'static Mutex<BuddyAllocator, Intr> {
-        static USERPOOL: UserPool = UserPool(Lazy::new(|| unsafe {
-            let mut alloc = BuddyAllocator::empty();
-            let chunk_size = 1 << MAX_ORDER;
-            for _ in (0..USER_POOL_LIMIT).step_by(chunk_size) {
-                let start = Palloc::alloc(chunk_size) as usize;
-                alloc.insert_range(start, start + chunk_size * PG_SIZE);
-            }
-            Mutex::new(alloc)
-        }));
+        static USERPOOL: UserPool = UserPool(Lazy::new(|| Mutex::new(BuddyAllocator::empty())));
 
         &USERPOOL.0
     }
diff --git a/src/trap.rs b/src/trap.rs
index d099ee4..207674f 100644
--- a/src/trap.rs
+++ b/src/trap.rs
@@ -74,24 +74,20 @@ pub extern "C" fn trap_handler(frame: &mut Frame) {
             thread::schedule();
         }
 
-        Interrupt(SupervisorExternal) => {
-            unsafe {
-                // Get the interrupt source.
-                let id = plic::read_claim();
-
-                // Handle the interrupt.
-                match id as _ {
-                    0 => panic!("There should be an interrupt"),
-                    plic::VIRTIO0_ID => virtio::handle_interrupt(),
-                    _ => panic!("Unknown Interrupt ID: {}", id),
-                }
-
-                // Tell PLIC we've done with the interrupt.
-                plic::write_completion(id);
-
-                riscv::register::sstatus::set_sie()
+        Interrupt(SupervisorExternal) => unsafe {
+            // Get the interrupt source.
+            let id = plic::read_claim();
+
+            // Handle the interrupt.
+            match id as _ {
+                0 => panic!("There should be an interrupt"),
+                plic::VIRTIO0_ID => virtio::handle_interrupt(),
+                _ => panic!("Unknown Interrupt ID: {}", id),
             }
-        }
+
+            // Tell PLIC we've done with the interrupt.
+            plic::write_completion(id);
+        },
 
         Exception(InstructionFault) | Exception(IllegalInstruction) => {
             // TODO: kill user process but not panic kernel
diff --git a/tool/src/build.rs b/tool/src/build.rs
index 429c5f6..acc28ae 100644
--- a/tool/src/build.rs
+++ b/tool/src/build.rs
@@ -4,10 +4,10 @@ const MAKE_DIR: &str = "..";
 
 pub fn main(args: crate::cli::BuildArgs) -> std::io::Result<()> {
     if args.rebuild {
-        make(args.verbose, &vec!["clean"])?;
+        make(args.verbose, &vec!["clean-tacos"])?;
         make(args.verbose, &vec![])?;
     } else if args.clean {
-        make(args.verbose, &vec!["clean"])?;
+        make(args.verbose, &vec!["clean-tacos"])?;
     } else {
         make(args.verbose, &vec![])?;
     }
